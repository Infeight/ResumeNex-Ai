import React, { useState } from "react";
import { useUser } from "../commonComponents/usercontext";
import { CgFileDocument } from "react-icons/cg";
import { LuLetterText } from "react-icons/lu";

const AISugg = () => {
  const [modalOpen, setModalOpen] = useState(false);
  const [selected, setSelected] = useState(null);
  const {darkMode} = useUser();

  const suggestions = [
    {
      id: 'RESUME_ExpAndFresher_1',
      creationDate: "12/11/2025",
      type: "Resume",
      title: "Resume Optimization",
      suggestions: [
        'Use action verbs',
        'Tailor your resume for each job application',
        'Highlight achievements with metrics'
      ],
      image: "/ResumesTempImg/ExpAndFresher/HighImg/RESUME_ExpAndFresher_1.avif",
       icon: "/Icons/Sidebar/MyResume.svg",
            darkIcon:<CgFileDocument style={{color:'white', fontSize:'1.7vw'}}/>
    },
    {
      id: '',
      creationDate: "1/12/2025",
      type: "Cover Letter",
      title: "Cover Letter Tips",
      suggestions: [
        'Personalize your cover letter',
        'Showcase your passion for the role',
        'Keep it concise and relevant'
      ],
      image: "/img/sampleCL.png",
       icon: "/Icons/Sidebar/MyCL.svg",
            darkIcon:<LuLetterText style={{color:'white', fontSize:'1.7vw'}}/>
    },
    {
      id: 'RESUME_ExpAndFresher_3',
      creationDate: "2/10/2025",
      type: "Resume",
      suggestions: [
        'Prepare for common interview questions',
        'Research the company culture',
        'Dress appropriately for the interview'
      ],
      image: "/ResumesTempImg/ExpAndFresher/HighImg/RESUME_ExpAndFresher_1.avif",
       icon: "/Icons/Sidebar/MyResume.svg",
            darkIcon:<CgFileDocument style={{color:'white', fontSize:'1.7vw'}}/>
    },
  ];

  return (
    <>
      {suggestions.length > 0 && (
        <div className={`${darkMode?'bg-[#1A1D23]':'bg-[#F7F7FB]'} rounded-[20px] px-[10px] sm:px-[14px] md:px-[20px] py-[14px] md:py-[20px] space-y-4 border-3 ${darkMode?'border-[#363B45]':'border-[#dcdcdc]'}  border-dashed`}>
          <p className={`font-inter font-semibold text-[20px] sm:text-[24px] md:text-[30px] ${darkMode?'text-[white]':'text-[#1E1B39]'}`}>
           Recommendations Generated by AI
          </p>
          <div className="flex flex-wrap gap-[16px] md:gap-[20px] ">
            {suggestions.map((activity, idx) => (
              <div
                key={activity.id + idx}
                className={`items-center flex flex-col sm:flex-row justify-between w-full sm:w-[45%] gap-[12px] md:gap-[20px]  ${darkMode?'bg-[#23272F]':'bg-[#F7F7FB]'} border ${darkMode?'border-[#363B45]':'border-[#dcdcdc]'} rounded-[20px] p-[12px] md:p-[20px]`}
              >
                {/* Resume Image */}
                <img
                  alt="resume"
                  className="
                    w-[250px]
                    sm:w-[140px]
                    md:w-[194px]
                    border border-[#DCDCDC] rounded-[15px]
                    mx-auto sm:mx-0
                    h-[270px]
                  "
                  src={activity.image}
                />

                {/* Details */}
                <div className="flex flex-col justify-between w-full sm:w-fit h-auto sm:h-56 mx-auto sm:mx-0">
                  <div className="flex flex-col gap-[10px] md:gap-[20px]">
                    <div className={`flex gap-[8px] md:gap-[10px] p-[10px] md:p-[15px] rounded-[9px]  ${darkMode?'text-[white]':'text-[#1E1B39]'} ${darkMode?'bg-[#1A1D23]':'bg-[#F7F7FB]'}  w-fit font-inter font-semibold text-[16px] md:text-[19.2px]`}>
                     {
                      darkMode?activity.darkIcon:
                       <img
                        src={activity.icon}
                        alt="resume"
                        className="w-[16px] md:w-[20px] fill-[#00A6F4]"
                      />
                     }
                      {activity.type}
                    </div>

                    <p className={`text-[14px] md:text-[16px]  ${darkMode?'text-[white]':'text-[#1E1B39]'}`}>
                      <span className="font-bold font-inter">
                        Creation Date:
                      </span>{" "}
                      {activity.creationDate}
                    </p>
                  </div>

                  <div
                    className={`flex justify-center gap-[10px] border border-[#00A6F4] w-full py-[5px] rounded-full ${darkMode?'bg-[#1A1D23]':'bg-[#F7F7FB]'} text-[#00A6F4] font-inter font-semibold text-[16px] md:text-[19.2px] cursor-pointer transition-all hover:scale-95 mt-2 sm:mt-0`}
                    onClick={() => {
                      setSelected(activity);
                      setModalOpen(true);
                    }}
                  >
                    Show Suggestions
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Modal */}
      {modalOpen && selected && (
       <div className="fixed inset-0 z-50 flex items-center justify-center bg-[#7a7a7a] bg-opacity-40">

        <div className={`${darkMode?'bg-[#1A1D23]':'bg-[#F7F7FB]'} rounded-2xl p-6 w-[80%] h-[80%] shadow-lg relative`}>

          <button
  className="
    absolute top-2 right-2
    text-xl
    border border-red-500
    bg-red-200
    px-3 py-[2px]
    rounded-lg
    text-red-600
    hover:text-red-700
    hover:bg-red-300
    box-border
  "
  onClick={() => setModalOpen(false)}
  aria-label="Close"
>
  Close
</button>


         <div className="flex flex-row items-center justify-around gap-4 w-full h-full p-5">


              <img
                src={selected.image}
                alt={selected.type}
                className="w-[30%] h-[90%] object-contain rounded-lg border"
              />


           <div className="w-1/2 h-[60%] flex flex-col justify-evenly">
  <h2 className={`${darkMode?'text-[white]':'text-[#1E1B39]'} text-4xl font-bold`}>{selected.title || selected.type}</h2>
  <p className={`${darkMode?'text-[white]':'text-[#1E1B39]'} mb-2 text-xl`}>
    <span className="font-semibold">Type:</span> {selected.type}
  </p>
  <p className={`${darkMode?'text-[white]':'text-[#1E1B39]'} mb-2 text-xl`}>
    <span className="font-semibold">Creation Date:</span> {selected.creationDate}
  </p>

  <h3 className={`${darkMode?'text-[white]':'text-[#1E1B39]'}`} style={{ margin: 0, fontSize: '2xl'  }}>Suggestions</h3>
  <ul className={`list-disc list-inside text-left ${darkMode?'text-[white]':'text-[#1E1B39]'} text-lg`}>
    {selected.suggestions.map((sugg, i) => (
      <li key={i}>{sugg}</li>
    ))}
  </ul>
</div>

            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default AISugg;
